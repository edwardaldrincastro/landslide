import React, { Component } from 'react';
import { StyleSheet, Text, View, ImageBackground, NetInfo } from 'react-native';
import { responsiveFontSize } from 'react-native-responsive-dimensions';


const axios = require('axios')
const PushNotification = require('react-native-push-notification');

PushNotification.configure({

  // (optional) Called when Token is generated (iOS and Android)
  onRegister: function (token) {
    console.log('TOKEN:', token);
  },

  // (required) Called when a remote or local notification is opened or received
  onNotification: function (notification) {
    console.log('NOTIFICATION:', notification);
  },
  
  // Should the initial notification be popped automatically
  // default: true
  popInitialNotification: false,

  requestPermissions: true,
});
export default class App extends Component {
  state = {
    result: '',
  }

  handleNotification = (message) => {

    PushNotification.localNotification({
      /* Android Only Properties */
      id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      ticker: "My Notification Ticker", // (optional)
      autoCancel: true, // (optional) default: true
      largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
      smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
      bigText: message + ' Warning', // (optional) default: "message" prop
      subText: "Landslide Warning", // (optional) default: none
     vibrate: true, // (optional) default: true
      vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
      
      /* iOS and Android properties */
      title: "Landslide Advisory", // (optional)
      message: message + ' Warning', // (required)
      playSound: true, // (optional) default: true
      soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
      number: 1, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
     });

  }
  getData = async (localWarning) => {
    try {

      if (NetInfo.isConnected) {
        response = await axios.get("http://192.168.1.7/webpage/getWarning.php")
        await console.log('payload', response.data)
        await this.setResult(response.data, localWarning)
      } else {
        console.log("No Internet Connection")
      }
    } catch {
      console.log('error')
    }
  }
  setResult = (response, localWarning) => {
    payload = response[0]
    this.setState({
      result: payload
    })


    if (payload.warning === localWarning) {
      this.handleMessage(payload.warning, false)
    } else {
      this.handleMessage(payload.warning, true)
    }

  }

  handleMessage = (payloadWarning, shouldNotify) => {
    console.log('handleMessage', shouldNotify)
    if (shouldNotify) {
      if (payloadWarning === 'Red') {
        this.handleNotification('Red')
      } else if (payloadWarning === 'Yellow') {
        this.handleNotification('Yellow')
      } else if (payloadWarning === 'Orange') {
        this.handleNotification('Orange')
      } else {

      }
    } else {
      console.log('No new warning')
    }

  }
  render() {
    const red = '#9C090E'
    const orange = '#FF760B'
    const yellow = '#F0C415'
    const disabled = '#3C3C3C'
    let warningColor = this.state.result.warning
    return (
      <View style={styles.container}>
        <ImageBackground source={require('./mountain.jpg')} style={{ height: '100%', width: '100%', justifyContent: 'center', alignItems: 'center' }}>

          <View style={styles.container}>
            <Text style={styles.title}>LANDSLIDE <Text style={{ fontWeight: 'normal', fontSize: responsiveFontSize(4) }}>ADVISORY</Text></Text>
          </View>
          <View style={[styles.warning, { backgroundColor: warningColor === 'Red' ? red : disabled }]}>
            <View style={styles.warningBox}>
              <Text style={styles.bold}>RED </Text>
              <Text style={styles.normal}>WARNING</Text>
            </View>
            <View style={styles.warningMessageContainer}>
              <Text style={styles.warningMessage}>
                Highly Susceptible! Be Alert and Ready to Evacuate.</Text></View>
          </View>

          <View style={[styles.warning, { backgroundColor: warningColor === 'Orange' ? orange : disabled }]}>
            <View style={styles.warningBox}>
              <Text style={styles.bold}>ORANGE </Text>
              <Text style={styles.normal}>WARNING</Text>
            </View>
            <View style={styles.warningMessageContainer}>
              <Text style={styles.warningMessage}>
                Susceptible! Be Cautious.</Text></View>
          </View>

          <View style={[styles.warning, { backgroundColor: warningColor === 'Yellow' ? yellow : disabled }]}>
            <View style={styles.warningBox}>
              <Text style={styles.bold}>YELLOW </Text>
              <Text style={styles.normal}>WARNING</Text>
            </View>
            <View style={styles.warningMessageContainer}>
              <Text style={styles.warningMessage}>
                Marginally Stable! Be Prepared.</Text></View>
          </View>

          <View style={styles.container}>
            <Text style={styles.details}>San Martin, Angono, Rizal</Text>
            <Text style={{ fontSize: responsiveFontSize(2), color: '#fff' }}>{this.state.result.timestamp}</Text>
          </View>
          <View onPress={this.getData(this.state.result.warning)} />
        </ImageBackground>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  warningBox: {
    flex: 1.1,
    justifyContent: 'center',
  },
  title: {
    fontSize: responsiveFontSize(4),
    textAlign: 'center',
    margin: 10,
    fontWeight: 'bold',
    color: '#000',
  },
  normal: {
    fontWeight: 'normal',
    fontSize: responsiveFontSize(3),
    color: '#fff'
  },
  bold: {
    fontWeight: 'bold',
    fontSize: responsiveFontSize(3),
    color: '#fff'
  },
  details: {
    fontSize: responsiveFontSize(2),
    color: '#fff'
  },
  instructions: {
    textAlign: 'center',
    color: '#333333',
    marginBottom: 5,
  },
  warning: {
    flex: 1,
    maxHeight: 120,
    width: '80%',
    backgroundColor: '#fff',
    margin: 10,
    padding: 15,
    flexDirection: 'row',
    // borderRadius: 75
  },
  warningMessage: {
    fontWeight: 'normal',
    fontSize: responsiveFontSize(2.1),
    color: '#fff'
  },
  warningMessageContainer: {
    flex: 0.9,
    justifyContent: 'center'
  },
});


